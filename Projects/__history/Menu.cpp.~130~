//============================================================================
// Name        : Menu.cpp
// Authors     : Bourgein, Oliver, Worth
// Date        :
// Version     :
// Copyright   : copyright reserved
// Description : A Menu Class to handle command line interface
//============================================================================/*

#include <string>
#include <iostream>
#include "Menu.h"

using namespace std;

//Constructor
Menu::Menu() {
	ReaderWriter rw;
	string filename = "newloc.txt";
	locT = rw.createTreeFromFile(filename);
	//int choice = -1;
}

void Menu::menuOptions(int &choice) {

    do {
    cout << endl << endl << "\t\t\t-----------------------------" << endl;
    cout << "\t\t\t- World Distance Calculator -" << endl;
    cout << "\t\t\t-----------------------------" << endl;

    cout << endl << "Main Menu - Choose an Option below:" << endl << endl;

	cout << "1. Add Record" << endl;
	cout << "2. Administer Record" << endl;
	cout << "3. Find Distance" << endl;
	cout << "4. Save Changes" << endl;
	cout << "5. Quit" << endl << endl;

	cout << "Choose an Option: ";
    cin >> choice;


        switch(choice){
            case 1:
                addRecord();
                break;
            case 2:
                administerRecord();
                break;
            case 3:
                findDistance();
                break;
            case 4:
				saveFile();
				break;
			case 5:
				displayLocations();
			case 6:
                cout << "Quit"; // PLACEHOLDER - REMOVE
                exit(EXIT_SUCCESS);
			default:
				cout << endl << "Invalid Choice" <<endl << endl;
				break;
        }
	} while (choice != 6);
}

void Menu::addRecord() {

	Location *newLoc;
	string city;
	string country;
	string region;
	int latDeg;
	int latMin;
	string latDir;
	int lonDeg;
	int lonMin;
	string lonDir;

    cout << "\t\t\t-----------------------------" << endl;
    cout << "\t\t\t- World Distance Calculator -" << endl;
    cout << "\t\t\t-----------------------------" << endl << endl;

	cout << "Add Record" << endl << endl;

	cout << "Enter City: "; cin >> city;
	cout << "Enter Country: "; cin >> country;
	cout << "Enter Region: "; cin >> region;
	cout << "Enter Latitude Degrees: "; cin >> latDeg;
	cout << "Enter Latitude Minutes: "; cin >> latMin;
	cout << "Enter Latitude Direction: "; cin >> latDir;
	cout << "Enter Longitude Degrees: "; cin >> lonDeg;
	cout << "Enter Longitude Minutes: "; cin >> lonMin;
	cout << "Enter Longitude Direction: "; cin >> lonDir;


	newLoc = new Location(city, country, region, latDeg, latMin, latDir,
				lonDeg, lonMin, lonDir);

	locT->addToTree(locT, newLoc, locT->getRoot(), city);
	cout << endl;
}

void Menu::administerRecord() {

	int choice2;
	string city;
	string strTemp;
	int intTemp;

    cout << endl << "\t\t\t-----------------------------" << endl;
    cout << "\t\t\t- World Distance Calculator -" << endl;
    cout << "\t\t\t-----------------------------" << endl << endl;

	cout << "Administer Record:" << endl << endl;

	/*cout << "\t1. City" << endl;
    cout << "\t2. Country" << endl;
	cout << "\t3. Region" << endl;
	cout << "\t4. Show All" << endl;
    cout << "\t5. Quit to Main Menu" << endl;

    cout << endl << "\tChoose an Option: ";
    cin >> choice;

    do {
		switch(choice){
			case 1:
				cout << "Enter City Name: "; cin >> city;
				cout << endl << "Cities found matching "; city;
            }
    } while (choice != 5);
   */
   cout << "Enter City Name: "; cin >> city;
   rootNode = locT->getRoot();
   foundLoc = Menu::getExactLocation(rootNode, city);

   cout << endl;
   //cout << foundLoc->getCityName();
   cout << endl << "Do you want to Modify or Delete the record?";
   cout << endl << "1. Modify" << endl;
   cout << "2. Delete" << endl << endl;
   cout << "3. Quit to Main Menu" << endl << endl;

   cout << "Modify/Delete a Record - Choose an option: ";
   cin >> choice2;

   switch(choice2){
	case 1:
		cout << "Editing " << foundLoc->getCityName() << ", in " << foundLoc->getCountryName();
		cout << endl << "Edit Country: (currently " << foundLoc->getCountryName() << ") : ";
		cin >> strTemp; foundLoc->setCountryName(strTemp);
		cout << "Edit Region: "; cin >> strTemp; foundLoc->setRegion(strTemp);
		cout << "Edit Latitude Degrees: "; cin >> intTemp; foundLoc->setLatDeg(intTemp);
		cout << "Edit Latitude Minutes: "; cin >> intTemp; foundLoc->setLatMin(intTemp);
		cout << "Edit Latitude Direction: "; cin >> strTemp; foundLoc->setLatDirection(strTemp);
		cout << "Edit Longitude Degrees: "; cin >> intTemp; foundLoc->setLonDeg(intTemp);
		cout << "Edit Longitude Minutes: "; cin >> intTemp; foundLoc->setLonMin(intTemp);
		cout << "Edit Longitude Direction: "; cin >> strTemp; foundLoc->setLonDirection(strTemp);
		break;
	case 2:
		cout << endl << "DELETING ENTRY" << endl << endl;
		if (foundNode->getDupsNo() == 0) {
			if (locT->deleteNode(city)) {
				cout << "City has been removed" << endl << endl;
			} else {
				cout << "WARNING! Deletion unsuccessful" << endl << endl;
			}
		} else {
			if (locT->deleteDupNode(foundNode, foundLoc->getNum())) {
				cout << "City has been removed" << endl << endl;
			} else {
				cout << "WARNING! Location Deletion unsuccessful" << endl << endl;
			}
		}
		system("PAUSE");
		break;
	case 3:
		break;
	default:
		cout << endl << "Invalid Choice" <<endl << endl;
		break;
	}
}

Location* Menu::getExactLocation(Node* node, string city) {
	foundNode = locT->getCity(node, city);
	if (foundNode == NULL) {
		cout << endl << "This city is not in the database." << endl << endl;
		system("PAUSE");
	} else {
		foundLoc = foundNode->getLocation();
		if (foundNode->noDups == 0) {
			cout << endl << "City Name: " << foundLoc->getCityName()  << endl;
			cout << "In Country: " << foundNode->getLocation()->getCountryName() << endl;
			cout << "In Region: " << foundNode->getLocation()->getRegion() << endl;
			cout << "Latitude Degrees: " << foundNode->getLocation()->getLatDeg() << endl;
			cout << "Latitude Minutes: " << foundNode->getLocation()->getLatMin() << endl;
			cout << "Latitude Direction: " << foundNode->getLocation()->getLatDirection() << endl;
			cout << "Longitude Degrees: " << foundNode->getLocation()->getLonDeg() << endl;
			cout << "Longitude Minutes: " << foundNode->getLocation()->getLonMin() << endl;
			cout << "Longitude Direction: " << foundNode->getLocation()->getLonDirection() << endl;
		} else {
			cout << endl << foundNode->getDupsNo()+1 << " match(es) found for " << foundLoc->getCityName()  << endl;
			for (int i=0; i <= foundNode->getDupsNo(); i++) {
				cout << foundLoc->getNum() << ". " << foundLoc->getCityName();
				cout << ", " << foundLoc->getCountryName();
				cout << ", " << foundLoc->getRegion();
				cout << ", " << foundLoc->getLatDeg();
				cout << ", " << foundLoc->getLatMin();
				cout << ", " << foundLoc->getLatDirection();
				cout << ", " << foundLoc->getLonDeg();
				cout << ", " << foundLoc->getLonMin();
				cout << ", " << foundLoc->getLonDirection() << endl;
				foundLoc = foundLoc->getDups();
			}
			cout << foundNode->getDupsNo()+2 << ". None of the above " << endl << endl;
			int citySelect;
			cout << "Enter a choice (number): ";
			cin >> citySelect;
			foundLoc = foundNode->getLocation();
			if (citySelect == foundNode->getDupsNo()+2) {
				//Menu::menuOptions(&choice);
			} else {
				while (foundLoc->getNum() != citySelect) {
					foundLoc = foundLoc->getDups();
				}
			}
		}
	}
	return foundLoc;
}

void Menu::findDistance() {
	string cityOne;
	string cityTwo;
	int inKm;
	Node* rootNode = locT->getRoot();

	cout << "Enter the first City's Name: "; cin >> cityOne;
	Location* locOne = Menu::getExactLocation(rootNode, cityOne);
	cout << "Enter the second City's Name: "; cin >> cityTwo;
	Location* locTwo = Menu::getExactLocation(rootNode, cityTwo);
	cout << "Result in miles (1) or km (2)?: "; cin >> inKm;

	Calculator calc;
	if (inKm == 1) {
		double dist = calc.getDistanceBetween(locOne,locTwo,0);
		cout << "distance between is " << dist << "miles" << endl;
	}
	else {
		double dist = calc.getDistanceBetween(locOne,locTwo,1);
		cout << "distance between is " << dist << "km" << endl;
    }
}

void Menu::saveFile(){
	ReaderWriter rw;
	rw.saveFile("bugger.txt",locT);
}

void Menu::displayLocations() {
	Node* root = locT->getRoot();
	string output = locT->serialise(root){
	cout << ouput << endl;
}


