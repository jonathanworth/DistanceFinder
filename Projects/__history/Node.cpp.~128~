//============================================================================
// Name        : Node.cpp
// Authors     : Bourgein, Oliver, Worth
// Date        : Created on: 26 Feb 2013
// Version     :
// Copyright   : copyright reserved
// Description : A Node Class for insertion into binary tree
//============================================================================/*

#include <string>
#include "Location.h"
#include "Node.h"

using namespace std;

	// Constructor creates an instance
	Node::Node(Location *location) {
		noDups = 0;
		ident=location->getCityName();
		this->location = location;
		left=NULL;
		right=NULL;
		parent=NULL;
		level = 0;
		childLeft=0;
		childRight=0;
		cout << "Node object created with name: " << ident << endl;
		};

	// Function to set left node
	void Node::setLeft(Node* left) {
		this->left = left;
	}

	// Function to set right node
	void Node::setRight(Node* right) {
		this->right = right;
	}

	// Function to set parent node
	void Node::setParent(Node* parent) {
		this->parent = parent;
	}

	// Function to return nodes name
	string Node::getIdent() {
		return this->ident;
	}

	string Node::getParId() {
		if (this->getParent() != NULL) {
			return this->getParent()->getIdent();
		} else {
			return "empty";
		}
	}

	string Node::getLeftId(){
		if (this->getLeft() != NULL) {
			return this->getLeft()->getIdent();
		} else {
			return "empty";
		}
	}
	string Node::getRightId() {
		if (this->getRight() != NULL) {
			return this->getRight()->getIdent();
		} else {
			return "empty";
		}
	}

	// Function to return left node
	Node* Node::getLeft() {
		return this->left;
	}

	// Function to return right node
	Node* Node::getRight() {
		return this->right;
	}

	// Function to return parent node
	Node* Node::getParent() {
		return this->parent;
	}

	// Function to return location pointer
	Location* Node::getLocation() {
		return this->location;
	}

	// Function to set location pointer
	void Node::setLocation(Location* location) {
		this->location = location;
	}

	void Node::setIdent(string id){
		this->ident = id;
	}

	int Node::getDupsNo() {
		return noDups;
	}

	void Node::plusDups() {
		noDups++;
    }

	void Node::minusDups() {
		noDups--;
	}

	int Node::getBalance() {
		return childLeft + childRight;
	}

	int Node::getCL() {
		return childLeft;
	}

	int Node::getCR() {
		return childRight;
	}

	void Node::setCL(int CL) {
		childLeft=CL;
	}

	void Node::setCR(int CR) {
		childRight=CR;
	}

	void Node::plusCL() {
		childLeft--;
	}

	void Node::minusCL() {
		childLeft++;
	}

	void Node::plusCR() {
		childRight++;
	}

	void Node::minusCR() {
        childRight--;
	}

	int Node::getLevel() {
		return level;
	}

	int Node::findLevel(Node* node) {
		int i=0;
		cout << node->getIdent() << ", " << node->getParent()->getIdent();
		while (node->getParent() != NULL) {
			cout << node->getIdent() << endl;
			node = node->getParent();
			i++;
		}
		return i;
    }

	void Node::setLevel(int level) {
		this->level=level;
	}

	void Node::plusLevel() {
		level++;
	}

	void Node::minusLevel() {
        level--;
    }

   string Node::displayLocs(){
	stringstream output;
	Location* location = Node::getLocation();
	output <<  "Loc: ";
	output << Node::getIdent();
	output <<  ", Dups: ";
	output << Node::getDupsNo();
	output <<  ", BalFac: ";
	output << Node::getBalance();
	output <<  ", Chlds L: ";
	output << Node::getCL();
	output <<  ", Chlds R: ";
	output << Node::getCR();
	output << ", Lev: ";
	output << Node::getLevel();
	output << ", R: ";
	output << Node::getRightId();
	output << "\n";
	for (int i=0; i <= Node::getDupsNo(); i++) {
		output << location->getCityName();
		output << ", ";
		output << location->getCountryName();
		output << ", ";
		output << location->getRegion();
		output << ", ";
		output << location->getLatDeg();
		output << " : ";
		output << location->getLatMin();
		output << ", ";
		output << location->getLatDirection();
		output << ", ";
		output << location->getLonDeg();
		output <<  " : ";
		output << location->getLonMin();
		output <<  ", ";
		output << location->getLonDirection();
		output << "\n";
		location = location->getDups();
	}
	return output.str();
}








