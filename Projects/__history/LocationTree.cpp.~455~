//============================================================================
// Name        : LocationTree.cpp
// Authors     : Bourgein, Oliver, Worth
// Date        : Created on: 26 Feb 2013
// Version     :
// Copyright   : copyright reserved
// Description : A Binary Tree Class to store Nodes
//============================================================================/*


#include <string>
#include "LocationTree.h"
#include "Menu.h"

using namespace std;

// Constructor
LocationTree::LocationTree() {
	cout << "LocationTree object created" << endl;
	root = NULL;
}

// Destructor
LocationTree::~LocationTree() {
	freeNode(root);
}

// Function to find root
Node* LocationTree::getRoot() {
	return root;
	}

// Function to set root
Node* LocationTree::setRoot(Node* node) {
	root == node;
	}

/* Function that adds new city locations to the tree (Nodes).
*  This function checks if the location should be added as a new node or as
*  a duplicate location
*  Uses the 2 addNode methods specified below
*/
bool LocationTree::addToTree(LocationTree* tree, Location* loc, Node* node, string city) {
	Node* duptest = getCity(node, city);
	if (duptest != NULL ) {
		Location* newDup = duptest->getLocation();
		while (newDup->getDups() != NULL) {
			newDup = newDup->getDups();
			loc->plusNum();
		}
		newDup->setDups(loc);
		loc->plusNum();
		duptest->plusDups();
		cout << "Adding new duplicate, locNum: " << loc->getNum() << " noDups: " << duptest->getDupsNo() <<
		endl;
	} else {
		tree->addNode(loc);
	}
}

// Function that adds nodes to the tree, used on the new tree to install root
void LocationTree::addNode (Location *loc) {
   if ( root != NULL ) {
		cout << "Tree established: adding a new node"<< endl;
		addNode(loc, root);
	} else {
		cout << "creating the root node" << endl;
		Node* node = new Node(loc);
		node->setIdent(loc->getCityName());
		node->setLevel(1);
		root = node;
	}
}

// Function that adds nodes to the tree, finding the correct position
void LocationTree::addNode(Location *loc, Node* test) {
	string ident = loc->getCityName();
	cout << "Add node function, adding: " << ident << endl;
	if (ident < test->getIdent()) { // if left
		test->plusCL(); // balancing info
		cout << test->getIdent() << " Left Childs  = " << test->getCL() << endl;
		cout << test->getIdent() << " Right Childs = " << test->getCR() << endl;
		if (test->getBalance() < -1 || test->getBalance() > 1) {
			balancePoint = test;
			cout << "balancePoint created: " << balancePoint->getIdent() << endl;
			childOne = L;
		}
		if (test->getLeft() != NULL )
			addNode(loc, test->getLeft());
		else {
			Node* node = new Node(loc);
			node->setIdent(ident);
			node->setParent(test);
			test->setLeft(node);
			node->setLevel(node->findLevel(node));
			if (balancePoint != NULL) {
				cout << node->getIdent() << " created, now perform balancing at " << balancePoint->getIdent() << endl;
				childTwo = L;
				insertedNode = node;
				midNode = node->getParent();
				cout << "childOne = " << childOne << ". childTwo = " << childTwo << endl;
				if (childOne == childTwo) {  // Single rotation needed
					LocationTree::rotateOne();
				} else { // Two rotations required
					cout << "Perform double rotation" << endl;
					LocationTree::rotateTwo();
					cout << "Begin second rotation" << endl;
					LocationTree::rotateOne();
				}
			}

		}
	} else {
		test->plusCR(); // balancing info
		cout << test->getIdent() << " Left Childs  = " << test->getCL() << endl;
		cout << test->getIdent() << " Right Childs = " << test->getCR() << endl;
		if (test->getBalance() < -1 || test->getBalance() > 1) {
			balancePoint = test;
			cout << "balancePoint created: " << balancePoint->getIdent() << endl;
			childOne = R;
		}
		if ( test->getRight() != NULL )
			addNode(loc, test->getRight());
		else {
			Node* node = new Node(loc);
			node->setIdent(ident);
			node->setParent(test);
			test->setRight(node);
			if (balancePoint != NULL) {
				cout << node->getIdent() << " created, now perform balancing at " << balancePoint->getIdent() << endl;
				childTwo = R;
				insertedNode = node;
				midNode = node->getParent();
				cout << "childOne = " << childOne << ". childTwo = " << childTwo << endl;
				if (childOne == childTwo) {  // Single rotation needed
					cout << "Perform single rotation" << endl;
					LocationTree::rotateOne();
				} else { // Two rotations required
					cout << "Perform double rotation" << endl;
					LocationTree::rotateTwo();
					cout << "Begin second rotation" << endl;
					LocationTree::rotateOne();
				}
			}
		}
	}
	if (balancePoint != NULL) {
		balanceUpToRoot(balancePoint);
    }
}

// Function that adds nodes to the tree, finding the correct position
void LocationTree::reAddNode(Location *loc, Node* test) {
	string ident = loc->getCityName();
	cout << "Add node function, adding: " << ident << endl;
	if (ident < test->getIdent()) { // if left
		test->plusCL(); // balancing info
		cout << test->getIdent() << " Left Childs  = " << test->getCL() << endl;
		cout << test->getIdent() << " Right Childs = " << test->getCR() << endl;
		if (test->getBalance() < -1 || test->getBalance() > 1) {
			balancePoint = test;
			cout << "balancePoint created: " << balancePoint->getIdent() << endl;
			childOne = L;
		}
		if (test->getLeft() != NULL )
			reAddNode(loc, test->getLeft());
		else {
			Node* node = new Node(loc);
			node->setIdent(ident);
			node->setParent(test);
			test->setLeft(node);
			node->setLevel(node->findLevel(node));
		}
	} else {
		test->plusCR(); // balancing info
		cout << test->getIdent() << " Left Childs  = " << test->getCL() << endl;
		cout << test->getIdent() << " Right Childs = " << test->getCR() << endl;
		if (test->getBalance() < -1 || test->getBalance() > 1) {
			balancePoint = test;
			cout << "balancePoint created: " << balancePoint->getIdent() << endl;
			childOne = R;
		}
		if ( test->getRight() != NULL )
			reAddNode(loc, test->getRight());
		else {
			Node* node = new Node(loc);
			node->setIdent(ident);
			node->setParent(test);
			test->setRight(node);
		}
	}
}

// Function to rebalance the tree up to the root
void LocationTree::balanceUpToRoot(Node* node) {
	Node* test = node;
	Node* previous;
	Node* next;
	Node* selected;
	cout << "test: " << test->getIdent() << endl;
	while (test->getParent() != NULL) {
		cout << "Top T: " << test->getIdent() << ", BalFac: " << test->getBalance() << ", CL: " << test->getCL() <<  ", CR: " << test->getCR() << endl;
		if (test->getBalance() < -1 || test->getBalance() > 1) {
			balancePoint = test;
			if (balancePoint->getCL()*(-1) > balancePoint->getCR()) {
				previous = getPrevious(balancePoint, balancePoint->getIdent());
				LocationTree::detachPrevious(previous);
				selected = previous;
				test = selected;

			} else {
				next = getNext(balancePoint, balancePoint->getIdent());
				LocationTree::detachNext(next);
				selected = next;
				test = selected;
			}
			LocationTree::swapInSelected(selected);
			selected->setCL(balancePoint->getCL());
			selected->setCR(balancePoint->getCR());
			reAddNode(balancePoint->getLocation(), root);
		}
		cout << "Bot T: " << test->getIdent() << ", BalFac: " << test->getBalance() << ", CL: " << test->getCL() <<  ", CR: " << test->getCR() << endl << endl;
		if (test->getParent() != NULL) {
			test = test->getParent();
		}
	}
	cout << "Top T: " << test->getIdent() << ", BalFac: " << test->getBalance() << ", CL: " << test->getCL() <<  ", CR: " << test->getCR() << endl;
		if (test->getBalance() < -1 || test->getBalance() > 1) {
			balancePoint = test;
			if (balancePoint->getCL()*(-1) > balancePoint->getCR()) {
				previous = getPrevious(balancePoint, balancePoint->getIdent());
				LocationTree::detachPrevious(previous);
				selected = previous;
				test = selected;

			} else {
				next = getNext(balancePoint, balancePoint->getIdent());
				LocationTree::detachNext(next);
				selected = next;
				test = selected;
			}
			LocationTree::swapInSelected(selected);
			selected->setCL(balancePoint->getCL());
			selected->setCR(balancePoint->getCR());
			reAddNode(balancePoint->getLocation(), root);
		}
		cout << "Bot T: " << test->getIdent() << ", BalFac: " << test->getBalance() << ", CL: " << test->getCL() <<  ", CR: " << test->getCR() << endl << endl;
}

/* Function to rebalance the tree up to the root
void LocationTree::balanceUpToRoot(Node* node) {
	Node* bottom = node;
	Node* middle = node->getParent();
	Node* top = middle->getParent();
	if (middle < top) {
		childOne = L;
	} else {
		childOne = R;
	}
	cout << "Bot: " << bottom->getIdent() << ", Mid: " << middle->getIdent() << ", Top:" << top->getIdent() << endl;
	while (top->getParent() != NULL) {
		cout << "T: " << top->getIdent() << ", BalFac: " << top->getBalance() << ", CL: " << top->getCL() <<  ", CR: " << top->getCR() << endl;
		if (top->getBalance() < -1 || top->getBalance() > 1) {
			balancePoint = top;
			cout << "BalPt: " << balancePoint->getIdent() << ", BalFac: " << balancePoint->getBalance() << endl;
			midNode = middle;
			cout << "Performing balancing at: " << balancePoint->getIdent() << endl;
			if (midNode->getCL() < -1 || midNode->getCL() > 1) {
				childTwo = L;
				insertedNode = midNode->getLeft();
				cout << "rotateTwo" << endl;
				rotateTwo();
				cout << "rotateOne" << endl;
				rotateOne();
			} else if (midNode->getCR() < -1 || midNode->getCR() > 1) {
				childTwo = R;
				insertedNode = midNode->getRight();
				cout << "rotateTwo" << endl;
				rotateTwo();
				cout << "rotateOne" << endl;
				rotateOne();
			} else {
				cout << "rotateOne" << endl;
				rotateOne();
			}
		}
		cout << "BalPt: " << balancePoint->getIdent() << ", BalFac: " << balancePoint->getBalance() << ", CL: " << top->getCL() <<  ", CR: " << top->getCR() << endl << endl;
		bottom = middle;
		middle = top;
		top = top->getParent();
    }
}*/

// Function that finds the furthest left entry
Node* LocationTree::getFirst(Node* node) {
	if (node == NULL) {
		return NULL;
	}
	if (node->getLeft()) {
		getFirst(node->getLeft());
	}
	else {
		return node;
	}
}

// Function that finds the furthest right entry
Node* LocationTree::getLast(Node* node) {
	if (node == NULL) {
		return NULL;
	}
	if (node->getRight()) {
		getLast(node->getRight());
	}
	else {
		return node;
	}
}

// Function that finds the furthest left entry (min) from a defined node
Node* LocationTree::getFarLeft(Node* node, string ident) {
	balancePoint = getCity(node, ident);
	if (balancePoint->getLeft() != NULL) {
		return getFirst(balancePoint->getLeft());
	} else {
		return balancePoint;
	}
}


// Function that finds the furthest right entry (max) from the current balancePoint node
Node* LocationTree::getFarRight(Node* node, string ident) {
	balancePoint = getCity(node, ident);
	if (balancePoint->getRight() != NULL) {
		return getLast(balancePoint->getRight());
	} else {
		return balancePoint;
	}

}

/**
*	Function that finds the closest smaller node to the defined node
*/
Node* LocationTree::getPrevious(Node* node, string ident) {
	balancePoint = getCity(node, ident);
	if (balancePoint != NULL) {
		return getLast(balancePoint->getLeft());
	} else {
		return balancePoint;
	}
}


// Function that finds the closest larger node the balancePoint node
Node* LocationTree::getNext(Node* node, string ident) {
	balancePoint = getCity(node, ident);
	if (balancePoint != NULL) {
		return getFirst(balancePoint->getRight());
	} else {
		return balancePoint;
	}

}
/**
*   Function to delete a duplicate location
*	if location is last in list delete
*	if location is within list join before and after then delete
*/
bool LocationTree::deleteDupNode(Node* foundNode, int number) {
	// cout << foundNode->getIdent() << foundNode->getDupsNo() << " " << number << endl;
	Location* foundLoc = foundNode->getLocation();
	Location* toRemove;
	Location* preceding;
	// cout << foundLoc->getNum() << foundLoc->getCityName() << foundLoc->getCountryName() << endl;
	if (number == 1) {
		toRemove = foundLoc;
		foundLoc = foundLoc->getDups();
		// cout << "toRemove = " << toRemove->getCountryName() << ". foundLoc = " << foundLoc->getCountryName() << endl;
		foundNode->setLocation(foundLoc);
		// cout << foundNode->getLocation()->getCountryName() << endl;
		foundNode->minusDups();
		foundLoc->minusNum();
		while (foundLoc->getDups() != NULL) {
			foundLoc = foundLoc->getDups();
			foundLoc->minusNum();
			// cout << foundLoc->getNum() << foundLoc->getCountryName() << endl;
		}
		delete toRemove;
		return true;
	} else {
		preceding = foundLoc;
		while (preceding->getNum() != number-1) { // find preceding loc
		preceding = preceding->getDups();
		// cout << preceding->getNum() << preceding->getCityName() << preceding->getCountryName() << endl;
		}
		if (number == foundNode->getDupsNo()+1) {  // if last
			toRemove = preceding->getDups();
			foundLoc->setDups(NULL);
			delete toRemove;
			foundNode->minusDups();
			return true;
		} else {
			toRemove = preceding->getDups();
			preceding->setDups(toRemove->getDups()); // rejoin to following
			foundNode->minusDups();
			delete toRemove;
			while (preceding->getDups() != NULL) {
				preceding = preceding->getDups();
				preceding->minusNum();
			}
			return true;
		}
	}
	return false;
}



/**
*  Function to delete a node
*  Step 1: If node is a leaf delete
*  Step 2:If it has a single child, replace leaf with child
*  Step 3: If 2 children, find the closest replacement node
*  remove replacement node, remove target node and insert replacement
*/
bool LocationTree::deleteNode(string ident) {
	balancePoint = getCity(root, ident);
	// Step 1
	if (balancePoint->getLeft() == NULL && balancePoint->getRight() == NULL) {
		// Check if root node
		if (balancePoint->getParent() == NULL) {
			cout << "This is the only entry in the tree" << endl;
			cout << "It cannot be deleted" << endl;
		}
		// Delete node
		else if (balancePoint->getIdent() > balancePoint->getParent()->getIdent()) {
			balancePoint->getParent()->setRight(NULL);
		} else {
			balancePoint->getParent()->setLeft(NULL);
		}
		delete balancePoint;
		return true;
	}
	// Step 2
	else if (balancePoint->getLeft() == NULL && balancePoint->getRight() != NULL) { //if leaf right
		// Check if root
		if (balancePoint->getParent() == NULL) {
			cout << "Creating new root" << endl;
			root = balancePoint->getRight();
			balancePoint->getRight()->setParent(NULL);
		}
		// Determine if node is on a right or left leaf
		else if (balancePoint->getIdent() > balancePoint->getParent()->getIdent()) { // if on right
			balancePoint->getParent()->setRight(balancePoint->getRight()); // Reset parents right
		} else {
			balancePoint->getParent()->setLeft(balancePoint->getRight()); // Reset parents left
		}
		delete balancePoint;
		return true;
	}
	else if (balancePoint->getLeft() != NULL && balancePoint->getRight() == NULL) { //if leaf left
		 // Check if root
		if (balancePoint->getParent() == NULL) {
			cout << "Creating new root" << endl;
			root = balancePoint->getLeft();
			balancePoint->getLeft()->setParent(NULL);
			}
		// Determine if parent is on a right or left leaf
		else if (balancePoint->getIdent() > balancePoint->getParent()->getIdent()) {
			balancePoint->getParent()->setRight(balancePoint->getLeft()); // Reset parents right
		} else {
			balancePoint->getParent()->setLeft(balancePoint->getLeft()); // Reset parents left
		}
		return true;
	}
	// Step 3
	else if (balancePoint->getLeft() != NULL && balancePoint->getRight() != NULL) { //if two leaves
		// Find nearest previous node
		Node* previous = getPrevious(balancePoint, ident);
		cout << "Previous: " << previous->getIdent() << endl;
		// Find nearest next node
		Node* next = getNext(balancePoint, ident);
		cout << "Next: " << next->getIdent() << endl;
		// create char arrays for comparison
		char * cstrCurr = new char[balancePoint->getIdent().length()+1];
		strcpy (cstrCurr, balancePoint->getIdent().c_str());
		char * cstrPrev = new char[previous->getIdent().length()+1];
		strcpy (cstrPrev, previous->getIdent().c_str());
		char * cstrNext = new char[next->getIdent().length()+1];
		strcpy (cstrNext, next->getIdent().c_str());
		// char[] copies of names made
		// find the nearest previous or next
		int prevDist, nextDist;
		int totPrev, totNext;
		int comLngth = ((balancePoint->getIdent().length() < previous->getIdent().length()) ? balancePoint->getIdent().length() : previous->getIdent().length());
		comLngth = ((comLngth < next->getIdent().length()) ? comLngth : next->getIdent().length());
		Node* selected = previous; // Pointer to the best replacement (default: previous)
		for (int i = 0; i < comLngth; i++) {
			totPrev = (cstrCurr[i]-cstrPrev[i]);
			totNext = (cstrNext[i]-cstrCurr[i]);
			if (totPrev < totNext || i == comLngth-1) {
				selected = previous;
				cout << "previous is closer: " << selected->getIdent() << endl;
				LocationTree::detachPrevious(previous);
				//break;
			} else {
				selected = next;
				cout << "next is closer: " << selected->getIdent() << endl;
				LocationTree::detachNext(next);
				//break;
			}
		}
		// Replacement node is now 'selected'
		// Copy balancePoint's child & parent nodes to replacement
		LocationTree::swapInSelected(selected);
		return true;
		}
	else {
		cout << "can't delete currently" << endl;
		return false;
	}
}

// Function to swap selected with balancePoint
void LocationTree::swapInSelected(Node* selected) {
	cout << "swapInSelected: selected: " << selected->getIdent() << ", balancePoint: " << balancePoint->getIdent() << endl;
	selected->setLeft(balancePoint->getLeft());
	cout << selected->getIdent() << " selected left now points to: " << selected->getLeftId() << endl;
	selected->setRight(balancePoint->getRight());
	cout << selected->getIdent() << " selected right now points to: " << selected->getRightId() << endl;
	// Check if root
	if (balancePoint->getParent() == NULL) {
		cout << "Creating new root: " << endl;
		selected->setParent(NULL);
		// Set root to selected);
		root = selected;
		cout << selected->getIdent() << " will be the root" << endl;
		cout << root->getIdent() << " is the new root node" << endl;
		selected->setLevel(1);
	}
	// Determine if parent is on a right or left leaf
	else if (balancePoint->getIdent() > balancePoint->getParent()->getIdent()) { // if on right
		balancePoint->getParent()->setRight(selected); // Reset parents right
		selected->setParent(balancePoint->getParent());
	} else {
		balancePoint->getParent()->setLeft(selected); // Reset parents left
		selected->setParent(balancePoint->getParent());
	}
	cout << selected->getIdent() << " selected parent now points to: " << selected->getParId() << endl;

}


// Function to detach previous node
void LocationTree::detachPrevious(Node* previous) {
	Node* reBalTest = previous;
	Node* reBalPar = previous->getParent();
	cout << "detatchPrevious() Detaching: " << reBalTest->getIdent() << endl;
	while (reBalPar->getParent() != NULL) {
		if (reBalTest->getIdent() < reBalPar->getIdent()) {  // if test on left of parent
			reBalPar->minusCL();
			cout << "reBalPar: " << reBalPar->getIdent() << ", CL:" << reBalPar->getCL() << endl;
		} else {
			reBalPar->minusCR();
			cout << "reBalPar: " << reBalPar->getIdent() << ", CR:" << reBalPar->getCR() << endl;
		}
		reBalTest = reBalTest->getParent();
		reBalPar = reBalPar->getParent();
	}
	if (reBalTest->getIdent() < reBalPar->getIdent()) {  // if test on left of parent
		reBalPar->minusCL();
		cout << "reBalPar: " << reBalPar->getIdent() << ", CL:" << reBalPar->getCL() << endl;
	} else {
		reBalPar->minusCR();
		cout << "reBalPar: " << reBalPar->getIdent() << ", CR:" << reBalPar->getCR() << endl;
	}
		if (previous->getIdent() > previous->getParent()->getIdent()) { // If parent left
			if (previous->getLeft() == NULL) { // previous = leaf
			previous->getParent()->setRight(NULL); // Reset parents right
			cout << "Here we are 506" << endl;
		} else {
			previous->getParent()->setRight(previous->getLeft());
		}
	} else {  // Parent right
		if (previous->getLeft() == NULL) { // previous = leaf
			previous->getParent()->setLeft(NULL); // Reset parents right
			cout << "Here we are 513" << endl;
		} else {
			previous->getParent()->setLeft(previous->getLeft());
		}
	}
}

void LocationTree::detachNext(Node* next) {
	Node* reBalTest = next;
	Node* reBalPar = next->getParent();
	cout << "detatchNext() Detaching: " << reBalTest->getIdent() << endl;
	while (reBalPar->getParent() != NULL) {
		if (reBalTest->getIdent() < reBalPar->getIdent()) {  // if test on left of parent
			reBalPar->minusCL();
			cout << "reBalPar: " << reBalPar->getIdent() << ", CL:" << reBalPar->getCL() << endl;
		} else {
			reBalPar->minusCR();
			cout << "reBalPar: " << reBalPar->getIdent() << ", CR:" << reBalPar->getCR() << endl;
		}
		reBalTest = reBalTest->getParent();
		reBalPar = reBalPar->getParent();
	}
	cout << "reBalPar: " << reBalPar->getIdent() << ", reBalTest: " << reBalTest->getIdent() << endl;
	if (reBalTest->getIdent() < reBalPar->getIdent()) {  // if test on left of parent
		reBalPar->minusCL();
		cout << "reBalPar: " << reBalPar->getIdent() << ", CL:" << reBalPar->getCL() << endl;
	} else {
		reBalPar->minusCR();
		cout << "reBalPar: " << reBalPar->getIdent() << ", CR:" << reBalPar->getCR() << endl;
	}
	if (next->getIdent() > next->getParent()->getIdent()) { // If parent left
		if (next->getRight() == NULL) { // next = leaf
			next->getParent()->setRight(NULL); // Reset parent's right
		} else {
			next->getParent()->setRight(next->getRight());
		}
	} else {
		if (next->getRight() == NULL) {  // next = leaf
			next->getParent()->setLeft(NULL);
		} else {
			next->getParent()->setLeft(next->getRight());
		}
	}
}


// Remove node
void LocationTree::freeNode(Node* leaf) {
	if (leaf != NULL) {
		freeNode(leaf->getLeft());
		freeNode(leaf->getRight());
		delete leaf;
	}
}

Node* LocationTree::getCity(Node* node, string ident)  {
	if (node != NULL) {
		if (ident == node->getIdent()) {
		return node;
		}
		if (ident < node->getIdent()) {
		return getCity(node->getLeft(), ident);
		}
		else {
		return getCity(node->getRight(), ident);
		}
	}
	else {
		return NULL;
	}
}

// Function rotation for LL/RR rotation or pt2 of LR/RL rotation
void LocationTree::rotateOne() {
	Node* newParent;
	if (childOne == L) {
		newParent = balancePoint->getLeft();
		newParent->setParent(balancePoint->getParent());
		// Check if root
		if (newParent->getParent() == NULL) {
			cout << "Swapping the root" << endl;
			root = newParent;
		} else if (balancePoint->getIdent() < balancePoint->getParent()->getIdent()) {
			balancePoint->getParent()->setLeft(newParent);
		} else {
			balancePoint->getParent()->setRight(newParent);
		}
		balancePoint->setParent(newParent);
		balancePoint->setLeft(newParent->getRight());
		if (balancePoint->getLeft() != NULL ) {
			balancePoint->getLeft()->setParent(balancePoint);
		}
		newParent->setRight(balancePoint);
		balancePoint->minusCL();
		balancePoint->minusCL();
		newParent->plusCR();

	} else {
		newParent = balancePoint->getRight();
		newParent->setParent(balancePoint->getParent());
		// Check if root
		if (newParent->getParent() == NULL) {
			cout << "Swapping the root" << endl;
			root = newParent;
		} else if (balancePoint->getIdent() < balancePoint->getParent()->getIdent()) {
			balancePoint->getParent()->setLeft(newParent);
		} else {
			balancePoint->getParent()->setRight(newParent);
		}
		balancePoint->setParent(newParent);
		balancePoint->setRight(newParent->getLeft());
		if (balancePoint->getRight() != NULL ) {
			balancePoint->getRight()->setParent(balancePoint);
		}
		newParent->setLeft(balancePoint);
		balancePoint->minusCR();
        balancePoint->minusCR();
		newParent->plusCL();
	}
	cout << balancePoint->getIdent() << " parent now points to: " << balancePoint->getParId() << endl;
	cout << balancePoint->getIdent() << " left now points to: " << balancePoint->getLeftId() << endl;
	cout << balancePoint->getIdent() << " right now points to: " << balancePoint->getRightId() << endl;
	cout << newParent->getIdent() << " parent now points to: " << newParent->getParId() << endl;
	cout << newParent->getIdent() << " left now points to: " << newParent->getLeftId() << endl;
	cout << newParent->getIdent() << " right now points to: " << newParent->getRightId() << endl;
	cout << "finished RotateOne" << endl;
}

void LocationTree::rotateTwo() {
	if (childTwo == L) { // rotate clockwise, LR case pt1
		cout << "childTwo = L = " << childTwo << endl;
		insertedNode->setParent(balancePoint); // 1 (8 ->A)
		midNode->setLeft(insertedNode->getRight()); // 2 (7 ->12)
		insertedNode->setRight(midNode); // 3 (10 ->C)
		midNode->setParent(insertedNode);  // 4 (5 ->B)
		balancePoint->setRight(insertedNode); // 5 (2 ->B)
		if (midNode->getLeft() != NULL) {
			midNode->getLeft()->setParent(midNode); // 6 (12 ->C)
		}
		// adjust balance factors
		insertedNode->plusCR();
		insertedNode->setCR(insertedNode->getCR() + midNode->getCR());
		midNode->minusCL();

	} else { // rotate anticlockwise, RL case pt1
	    cout << "childTwo = R = " << childTwo << endl;
		insertedNode->setParent(balancePoint); // 1 (
		midNode->setRight(insertedNode->getLeft()); // 2
		insertedNode->setLeft(midNode); // 3
		midNode->setParent(insertedNode); // 4
		balancePoint->setLeft(insertedNode); // 5
		if (midNode->getRight() != NULL) {
			midNode->getRight()->setParent(midNode); // 6
		}
		// adjust balance factors
		insertedNode->plusCL();
		insertedNode->setCL(insertedNode->getCL() + midNode->getCR());
		midNode->minusCR();
	}
	cout << midNode->getIdent() << " parent now points to: " << midNode->getParId() << endl;
	cout << midNode->getIdent() << " left now points to: " << midNode->getLeftId() << endl;
	cout << midNode->getIdent() << " right now points to: " << midNode->getRightId() << endl;
	cout << "finished RotateTwo" << endl;
}

string LocationTree::serialise(Node* node){
stringstream ss;
ss << node->location->serialise() << "\n";
if (node->getLeft() != NULL) {
ss << serialise(node->getLeft());
}
if (node->getRight() != NULL) {
ss << serialise(node->getRight());
}
return ss.str();
}

string LocationTree::displayTrav(Node* node){
stringstream ss;
ss << node->displayLocs() << "\n";
if (node->getLeft() != NULL) {
	ss << displayTrav(node->getLeft());
}
if (node->getRight() != NULL) {
	ss << displayTrav(node->getRight());
}
return ss.str();
}




